@page
@model FamilyRecipes.Pages.Recipes.CreateModel

@{
    ViewData["Title"] = "Create";
}

<h2>Create</h2>

<h4>Recipe</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form method="post" >
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Recipe.Name" class="control-label"></label>
                <input asp-for="Recipe.Name" id="recipeDate" class="form-control" onkeyup="this.value = this.value.toTitleCase();"/>
                <span asp-validation-for="Recipe.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Recipe.Type" class="control-label"></label>
                <input asp-for="Recipe.Type" id="recipeDate" class="form-control" onkeyup="this.value = this.value.toTitleCase();"/>
                <span asp-validation-for="Recipe.Type" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Recipe.CreatedBy" class="control-label"></label>
                <input asp-for="Recipe.CreatedBy" id="recipeDate" class="form-control" onkeyup="this.value = this.value.toTitleCase();"/>
                <span asp-validation-for="Recipe.CreatedBy" class="text-danger"></span>
            </div>

            <fieldset>
                <legend>Ingredients</legend>
                <table id="ingredientTable" class="table">
                    <thead>
                        <tr>
                            <td>Ingredient</td>
                            <td>Quantity</td>
                            <td>Units</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr id="tablerow0">
                            <td class="data">
                                @Html.TextBoxFor(m => m.Ingredients[0].Name, new { @class = "form-control form-control-sm valid", @onkeyup = "this.value = this.value.toLowerCase();" })
                            </td>
                            <td class="data">
                                @Html.TextBoxFor(m => m.Ingredients[0].Quantity, new { @class = "form-control form-control-sm valid", @onkeyup = "this.value = this.value.toLowerCase();" })
                            </td>
                            <td class="data">
                                @Html.TextBoxFor(m => m.Ingredients[0].Unit, new { @class = "form-control form-control-sm valid", @onkeyup = "this.value = this.value.toLowerCase();" })
                            </td>
                            @*<td>
                                <div class="editor-field">
                                    <input asp-for="Ingredients[0].Name" class="form-control form-control-sm" onkeyup="this.value = this.value.toLowerCase();" />
                                    <span asp-validation-for="Ingredients[0].Name" class="text-danger"></span>
                                </div>
                            </td>
                            <td>
                                <div class="editor-field">
                                    <input asp-for="Ingredients[0].Quantity" class="form-control form-control-sm" onkeyup="this.value = this.value.toLowerCase();" />
                                    <span asp-validation-for="Ingredients[0].Quantity" class="text-danger"></span>
                                </div>
                            </td>
                            <td>
                                <div class="editor-field">
                                    <input asp-for="Ingredients[0].Unit" class="form-control form-control-sm" onkeyup="this.value = this.value.toLowerCase();" />
                                    <span asp-validation-for="Ingredients[0].Unit" class="text-danger"></span>
                                </div>
                            </td>*@
                            <td>
                                <input id="deletebutton" class="btn btn-link pull-left" role="link" type="submit" value="Delete" style="padding:0" />
                            </td>
                        </tr>
                    </tbody>
                </table>

                <button id="addButton" type="submit" class="btn btn-default btn-sm pull-right">New Ingredient</button>

                <br />
                <hr />

                <div class="form-group">
                    <button type="submit" class="btn btn-primary pull-right" id="submitButton">Submit Recipe</button>
                </div>
            </fieldset>

        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script type="text/javascript">
        //var s = document.getElementById("counter");
        counter = 0;
        $(function () {

            $('#addButton').click(function () {
                counter++;
                $('<tr id="tablerow' + counter + '"><div class="editor-field"><td class="data">' +
                    '<input class="form-control form-control-sm" onkeyup="this.value = this.value.toLowerCase();" type="text" data-val="true" data-val-length="The field Ingredient must be a string with a minimum length of 3 and a maximum length of 50." data-val-length-max="50" data-val-length-min="3" data-val-required="The Ingredient field is required." id="Ingredients_' + counter + '__Name" name="Ingredients[' + counter + '].Name" value="">' +
                    '<span class="text-danger field-validation-valid" data-valmsg-for="Ingredients[' + counter + '].Name" data-valmsg-replace="true"></span>' +
                    '</td>' +
                    '<td class="data">' +
                    '<input class="form-control form-control-sm valid" onkeyup="this.value = this.value.toLowerCase();" type="text" data-val="true" data-val-length="The field Ingredient must be a string with a minimum length of 3 and a maximum length of 50." data-val-length-max="50" data-val-length-min="3" data-val-required="The Ingredient field is required." id="Ingredients_' + counter + '__Quantity" name="Ingredients[' + counter + '].Quantity" value="" aria-describedby="Ingredients_' + counter + '__Quantity-error" aria-invalid="false">' +
                    '<span class="text-danger field-validation-valid" data-valmsg-for="Ingredients[' + counter + '].Quantity" data-valmsg-replace="true"></span>' +
                    '</td>' +
                    '<td class="data">' +
                    '<input class="form-control form-control-sm valid" onkeyup="this.value = this.value.toLowerCase();" type="text" data-val="true" data-val-length="The field Ingredient must be a string with a minimum length of 3 and a maximum length of 50." data-val-length-max="50" data-val-length-min="3" data-val-required="The Ingredient field is required." id="Ingredients_' + counter + '__Unit" name="Ingredients[' + counter + '].Unit" value="" aria-describedby="Ingredients_' + counter + '__Unit-error" aria-invalid="false">' +
                    '<span class="text-danger field-validation-valid" data-valmsg-for="Ingredients[' + counter + '].Unit" data-valmsg-replace="true"></span>' +
                    '</td>' +
                    '<td>' +
                    '<input id="deletebutton" class="btn btn-link pull-left" role="link" type="submit" value="Delete" style="padding:0" />' +
                    '</td>' +
                    '</div></tr>').appendTo('#ingredientTable');
                return false;
            });
        });

          $('table').on('click', 'input[id="deletebutton"]', function(e){
           $(this).closest('tr').remove()
        });

        $('#submitButton').click(function () {
            var RequestHeader = $('input:hidden[name="__RequestVerificationToken"]').val();
            var ingredientRows = [];
            var headers = []
            headers[0] = 'Name';
            headers[1] = 'Quantity';
            headers[2] = 'Unit';
            $('tbody tr').has('td').each(function(index, item) {
                var arrayItem = {};
                $('.data', $(this)).each(function(index, item) {
                    arrayItem[headers[index]] = $(item).find('input').val();
                });
                ingredientRows.push(arrayItem);
            });
            var RecipeName = document.getElementsByName("Recipe.Name")[0].value;
            var RecipeType = document.getElementsByName("Recipe.Type")[0].value;
            var RecipeCreatedBy = document.getElementsByName("Recipe.CreatedBy")[0].value;
            var Recipe = {  'Name' : RecipeName,
                            'Type' : RecipeType,
                            'CreatedBy' : RecipeCreatedBy
                            };
            $.ajax({
                //async: false,
                type: "POST",
                url: "/Recipes/Create?handler=Create",
                beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN", RequestHeader);
                    },
                data: {'Recipe' : Recipe,
                        'Ingredients' : ingredientRows,
                        '__RequestVerificationToken' : RequestHeader},
                datatype: 'json',
                success: function (response) {
                        window.location = "https://localhost:5001/Recipes/";
                    },
                error: function (response) {
                    alert("error!");  //
                    }
                });

        });

    </script>
}
